@using Olga.DAL.Entities
@using Olga.Models
@using System.Globalization

@helper MakeEditFiles(ProcedureViewModel procedureViewModel, ProcedureDocsType procedureDocsType)
{
    <span class="doc_type_name">@GetFileTypeText(procedureDocsType)</span>
    <br />
    <br />
    var archivedFiles = procedureViewModel?.ProcedureDocuments.Where(a => a.IsArchived
                                                                          && a.ProcedureDocsType == (ProcedureDocsType)procedureDocsType).ToList();
    var nonArchivedFiles = procedureViewModel?.ProcedureDocuments.Where(a => !a.IsArchived
                                                                             && a.ProcedureDocsType == (ProcedureDocsType)procedureDocsType).ToList();

    if (nonArchivedFiles != null)
    {
        foreach (var document in nonArchivedFiles)
        {
            if (document.ProcedureDocsType == @procedureDocsType)
            {
                @MakeDivForFiles(document)
            }
        }
    }
    <hr />
    if (archivedFiles != null && archivedFiles.Count>0)
    {
        <p><span>Archived files:</span></p>
        foreach (var document in archivedFiles)
        {
            if (document.ProcedureDocsType == @procedureDocsType)
            {
                @MakeDivForFiles(document)
            }
        }
    }
}

@helper MakeDivForFiles(ProcedureDocument document)
{
    var archiveClass = document.IsArchived ? "archiveOut" : "archive";
    var archiveToolTip = document.IsArchived ? "Get file from archive" : "Archive file";

    <div style="display: table; height: 70px; overflow: hidden;">
        <div style="display: table-cell; vertical-align: middle;">
            <a href="~/Upload/Documents/Procedures/@document.PathToDocument">@document.PathToDocument.Replace(@"/Archives/", "")</a>

            <a href="#" id="@document.Id" class="delete" title="Delete file">
                <img src="../../Content/images/remove.png" />
            </a>

            <a href="#" id="@document.Id" class="@archiveClass" data-isArchive="@document.IsArchived" tooltip="@archiveToolTip" title="@archiveToolTip">
                <img />
            </a>

            <img id="load_@document.Id" style="visibility: hidden; height: 30px; margin-left: 15px;" src="~/Content/images/loader.gif">
        </div>
        <br />
    </div>
}


@helper  GetFileTypeText(ProcedureDocsType procedureDocsType)
{
    switch (procedureDocsType)
    {
        case ProcedureDocsType.DossierObtainedFromM:
            @Resources.ProcedureDocsTypes.DossierObtainedFromM
            break;
        case ProcedureDocsType.DossierSubmittedToAuth:
            @Resources.ProcedureDocsTypes.DossierSubmittedToAuth
            break;
        case ProcedureDocsType.RemarksFromAuth:
            @Resources.ProcedureDocsTypes.RemarksFromAuth
            break;
        case ProcedureDocsType.RemarksToAuth:
            @Resources.ProcedureDocsTypes.RemarksToAuth
            break;
    }
}

@helper MakeViewFiles(ProcedureViewModel procedureViewModel)
{
    var procedureDocsTypes = Enum.GetValues(typeof(ProcedureDocsType));

    foreach (var procedureDocsType in procedureDocsTypes)
    {

        if (User.IsInRole("Admin") || User.IsInRole("Manager"))
        {
            <a href="/Procedure/EditFiles/@procedureViewModel.Id?productId=@procedureViewModel.ProductId&procedureDocsType=@procedureDocsType">@GetFileTypeText((ProcedureDocsType)procedureDocsType)</a>
        }
        else
        {
            <span>@GetFileTypeText((ProcedureDocsType)procedureDocsType)</span>
        }
        <br />
        <br />

        var archivedFiles = procedureViewModel?.ProcedureDocuments.Where(a => a.IsArchived
                                                                              && a.ProcedureDocsType == (ProcedureDocsType)procedureDocsType).ToList();
        var nonArchivedFiles = procedureViewModel?.ProcedureDocuments.Where(a => !a.IsArchived
                                                                                 && a.ProcedureDocsType == (ProcedureDocsType)procedureDocsType).ToList();

        if (nonArchivedFiles != null)
        {
            foreach (var document in nonArchivedFiles)
            {
                @MakeDetailedViewForFile(document);
            }
        }

        if (archivedFiles != null && archivedFiles.Count > 0)
        {
            var @filesCount = archivedFiles.Count;
            var random = Guid.NewGuid();
            string boxId = $"box{random}";
            string hrefAnchor = $"#toggler{random}";

            <div style="margin-top: 15px; color: grey;">
                <span>Archived (@filesCount files)</span>
                <a onclick="javascript:openbox('@boxId', this, @filesCount);" href="@hrefAnchor">
                    <span>Show list</span>
                    <i class="glyphicon glyphicon-arrow-down"></i>
                </a><br/>
            </div>

            <div id="@boxId" style="background-color: lightgray; color: darkgray; display: none; text-align: left !important">
                @foreach (var document in archivedFiles)
                {
                    @MakeDetailedViewForFile(document);
                }
            </div>
        }
        <hr />
        @*foreach (var document in procedureViewModel.ProcedureDocuments)
            {
                var docDate = document.DownloadDt != null ? $"[{document.DownloadDt.Value.ToShortDateString()}]" : "[no date]";
                if (document.ProcedureDocsType == (ProcedureDocsType)procedureDocsType)
                {

                    <i class="glyphicon glyphicon-file"></i>
                    <span>@docDate</span>
                    <a class="docs_link" href="~/Upload/Documents/Procedures/@document.PathToDocument">@document.PathToDocument.Replace(@"/Archives/", "")</a>
                    <br />
                }
            }
            <hr />*@
    }
}
@helper MakeDetailedViewForFile(ProcedureDocument document)
{
    var docDate = document.DownloadDt != null ? $"[{document.DownloadDt.Value.ToShortDateString()}]" : "[no date]";
    var glyphiconIcon = document.IsArchived ? "glyphicon-inbox" : "glyphicon-file";
    var tooltip = document.IsArchived ? "Archived" : "Actual file";
    <i class="glyphicon @glyphiconIcon"></i>
    <span>@docDate</span>
    <a class="docs_link" tooltip="@tooltip;" href="~/Upload/Documents/Procedures/@document.PathToDocument">@document.PathToDocument.Replace(@"/Archives/", "")</a>
    <br />
}

@helper MakeProductInfoField()
{
    <span class="productInfo" id="PharmaceuticalForm"><img src="../../Content/images/loader.gif" /></span>
    <span class="productInfo" id="Strength"><img src="../../Content/images/loader.gif" /></span>
    <span class="productInfo" id="MarketingAuthorizNumber"><img src="../../Content/images/loader.gif" /></span>
    <span class="productInfo" id="ProductCode"><img src="../../Content/images/loader.gif" /></span>
}

