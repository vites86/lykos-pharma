@using Olga.Models
@using System.Web.Mvc.Html
@using Olga.DAL.Entities
@model Olga.Models.ShowProductModel
@{
    ViewBag.Title = $"{Model.ProductName} Docs";
}

<div>
<div class="row" style="overflow: auto; margin-left:  10px; margin-right: 10px;">
        <h2>Product <span class="product_name">@Model.ProductName</span></h2>

            <div class="form-horizontal">
                <br />
                <hr />
                <div class="form-group">
                    @Html.Label("CountryName", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        <label class="control-label text-info ">@Model.Country</label>
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.ProductName, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        <label class="control-label text-info ">@Model.ProductName</label>
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.ProductCode, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        <label class="control-label text-info ">@Model.ProductCode</label>
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Strength, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        <label class="control-label text-info ">@Model.Strength</label>
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.PharmaceuticalForm, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        <label class="control-label text-info">@Model.PharmaceuticalForm</label>
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.MarketingAuthorizNumber, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        <label class="control-label text-info">@Model.MarketingAuthorizNumber</label>
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.PackSize, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        <label class="control-label text-info">@Model.PackSize</label>
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.MarketingAuthorizHolder, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        <label class="control-label text-info">@Model.MarketingAuthorizHolder</label>
                    </div>
                </div>
                <div class="form-group">
                    @Html.Label("ApprDocsTypes", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10 left">
                        @Html.HiddenFor(m => m.DocumentImagesListStringApprs)
                        <table class="table">
                            @foreach (var apprDocsType in ViewBag.apprDocsTypes)
                            {
                                var apprId = @apprDocsType.Value;
                                <tr>
                                    <td colspan="2" style="text-align: left; padding-left: 0px !important">
                                        <label class="text-info">@apprDocsType.Text</label>
                                    </td>
                                    <td>
                                        @foreach (var fileName in Model.DocumentImagesApprs)
                                        {
                                            if (fileName.Contains(@apprId + "__"))
                                            {
                                                var folder = GetApprFolder(apprDocsType.Text);

                                                <label class="control-label text-info">
                                                    <span class="glyphicon glyphicon-file" />
                                                    <a href="#" onclick="doesFileExist('/Upload/Documents/@folder/@fileName')">
                                                        @fileName
                                                    </a>
                                                </label><br/>
                                            }
                                        }
                                        @if (apprId.Equals("3") && !ViewBag.NcAccess && User.IsInRole("User"))
                                        {
                                            <img src="~/Content/images/locked.jpg" width="50" />
                                        }
                                        @if (apprId.Equals("5") && User.IsInRole("User"))
                                        {
                                            <img src="~/Content/images/locked.jpg" width="50" />
                                        }
                                    </td>
                                </tr>
                            }
                        </table>
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Manufacturers, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @foreach (var manufacturer in Model.Manufacturers)
                        {
                            <label class="control-label text-info">@manufacturer.Name</label><br />
                        }
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Artworks, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10 left">
                        @Html.HiddenFor(m => m.DocumentImagesListStringArtworks)

                        <table class="table">
                            @foreach (var artwork in Model.Artworks)
                            {
                                var artworkId = @artwork.Id;
                                <tr>
                                    <td colspan="2" style="text-align: left; padding-left: 0px !important">
                                        <label class="text-info">@artwork.Artwork_name</label>
                                    </td>
                                    <td>
                                        @foreach (var fileName in Model.DocumentImagesArtworks)
                                        {
                                            if (fileName.Contains(@artworkId + "__"))
                                            {
                                                var folder = $"Artwork/{@artworkId}";

                                                <label class="control-label text-info">
                                                    <span class="glyphicon glyphicon-file" />
                                                    <a href="#" onclick="doesFileExist('/Upload/Documents/@folder/@fileName')">
                                                        @fileName
                                                    </a>
                                                </label><br />
                                            }
                                        }
                                    </td>
                                </tr>
                            }
                        </table>
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.IssuedDate, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @{
                            var dateValue =
                                string.IsNullOrEmpty(Model.IssuedDate)
                                    ? "No Issued Date"
                                    : DateTime.Parse(@Model.IssuedDate).ToString("u").Substring(0, 10);

                        }
                        <label class="control-label text-info">@dateValue</label>
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.ExpiredDate, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @{
                            var dateValue2 = string.IsNullOrEmpty(Model.ExpiredDate) ? "ExpiredDate" : Model.ExpiredDate;
                            if (Model.UnLimited)
                            {
                                dateValue2 = "UnLimited";
                            }
                        }
                        <label class="control-label text-info">@dateValue2</label>
                    </div>
                </div>
                <br /><br />
                <hr />
            </div>
        </div>
    </div>
    @Html.Partial("~/Views/Shared/_UploadFiles.cshtml")

<style>
    h2 {
        margin-left: 150px;
    }
    .show_blockOfImage {
        display: inline-block;
        text-align: center;
        margin-left: 10px;
    }

    .hidden {
        display: none;
    }

    .product_name {
        color: blue;
        font-weight: bold;
    }
</style>

    @section Scripts {
        @Scripts.Render("~/bundles/jqueryval")
        @Scripts.Render("~/bundles/dropzonescripts")
        <script src='@Url.Content("~/Scripts/jquery-ui-1.12.1.min.js")' type="text/javascript"></script>
        <script src='@Url.Content("~/Scripts/Products/products.js")'></script>
        <script src='@Url.Content("~/Scripts/Products/artworks.js")'></script>
        <script>
        function doesFileExist(_urlToFile) {
            var encodedUrl = _urlToFile.replace("#","%23");
            console.log('encodedUrl =' + encodedUrl);
            var domain = document.location.origin;
            var urlToFile = domain + encodedUrl;
            var xhr = new XMLHttpRequest();
            xhr.open('HEAD', urlToFile, false);
            xhr.send();

            if (xhr.status == "404") {
                console.log("File /" + urlToFile +"/ doesn't exist");
                toastr.error("File doesn't exist");
            } else {
                toastr.info("Opening/Downloading file...");
                console.log("File exists");
                window.open(urlToFile, '_blank');
            }
        }</script>
    }

    @functions {

        public static string GetFileImagePath(string fileName, string docsType, string docsSubType)
        {
            var folder = "/";
            if (docsType.Contains("Appr"))
            {
                folder = GetApprFolder(docsSubType);
            }
            if (docsType.Contains("Artwork"))
            {
                folder = "Artwork/" + docsSubType;
            }


            var ext = fileName.Substring(fileName.LastIndexOf("."), fileName.Length - fileName.LastIndexOf("."));
            var docImage = String.Concat("/Upload/Documents/", folder, "/", fileName);
            if (ext.Equals(".txt"))
            {
                docImage = "/Content/images/extentions/txt.jpg";
            }
            if (ext.Equals(".pdf"))
            {
                docImage = "/Content/images/extentions/pdf.jpg";
            }
            if (ext.Equals(".ai"))
            {
                docImage = "/Content/images/extentions/ai.jpg";
            }
            if (ext.Equals(".docx") || ext.Equals(".doc") || ext.Equals(".DOC"))
            {
                docImage = "/Content/images/extentions/docx.jpg";
            }
            if (ext.Equals(".xlsx") || ext.Equals(".xls"))
            {
                docImage = "/Content/images/extentions/xlsx.jpg";
            }
            if (ext.Equals(".cdr"))
            {
                docImage = "/Content/images/extentions/cdr.jpg";
            }
            return docImage;
        }

        public static string GetApprFolder(string appr)
        {
            switch (@appr)
            {
                case "Registration certificate":
                    return "ApprDocType/RegistrationCertificate";
                case "PIL":
                    return $"ApprDocType/{@appr}";
                case "ND / MQC":
                    return "ApprDocType/NDMQC";
                case "Pack materials / Labelling":
                    return "ApprDocType/PackMaterialsLabelling";
                case "Trademarks":
                    return "ApprDocType/Trademarks";
            }
            return appr;
        }
    }


